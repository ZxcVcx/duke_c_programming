Grading at Sat 07 Oct 2023 07:18:54 AM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==580== Memcheck, a memory error detector
==580== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==580== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==580== Command: ./tester hands.txt draw.txt
==580== Parent PID: 579
==580== 
==580== Invalid read of size 1
==580==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==580==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==580==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==580==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==580== 
==580== 
==580== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==580==  Access not within mapped region at address 0x0
==580==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==580==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==580==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==580==  If you believe this happened as a result of a stack
==580==  overflow in your program's main thread (unlikely but
==580==  possible), you can try to increase the size of the
==580==  main thread stack using the --main-stacksize= flag.
==580==  The main thread stack size used in this run was 8388608.
==580== 
==580== HEAP SUMMARY:
==580==     in use at exit: 608 bytes in 3 blocks
==580==   total heap usage: 4 allocs, 1 frees, 1,120 bytes allocated
==580== 
==580== LEAK SUMMARY:
==580==    definitely lost: 0 bytes in 0 blocks
==580==    indirectly lost: 0 bytes in 0 blocks
==580==      possibly lost: 0 bytes in 0 blocks
==580==    still reachable: 608 bytes in 3 blocks
==580==         suppressed: 0 bytes in 0 blocks
==580== Rerun with --leak-check=full to see details of leaked memory
==580== 
==580== For lists of detected and suppressed errors, rerun with: -s
==580== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==585== Memcheck, a memory error detector
==585== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==585== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==585== Command: ./tester hands.txt draw.txt
==585== Parent PID: 584
==585== 
==585== Invalid read of size 1
==585==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==585==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==585==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==585==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==585== 
==585== 
==585== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==585==  Access not within mapped region at address 0x0
==585==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==585==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==585==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==585==  If you believe this happened as a result of a stack
==585==  overflow in your program's main thread (unlikely but
==585==  possible), you can try to increase the size of the
==585==  main thread stack using the --main-stacksize= flag.
==585==  The main thread stack size used in this run was 8388608.
==585== 
==585== HEAP SUMMARY:
==585==     in use at exit: 608 bytes in 3 blocks
==585==   total heap usage: 4 allocs, 1 frees, 1,120 bytes allocated
==585== 
==585== LEAK SUMMARY:
==585==    definitely lost: 0 bytes in 0 blocks
==585==    indirectly lost: 0 bytes in 0 blocks
==585==      possibly lost: 0 bytes in 0 blocks
==585==    still reachable: 608 bytes in 3 blocks
==585==         suppressed: 0 bytes in 0 blocks
==585== Rerun with --leak-check=full to see details of leaked memory
==585== 
==585== For lists of detected and suppressed errors, rerun with: -s
==585== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==591== Memcheck, a memory error detector
==591== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==591== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==591== Command: ./tester h.txt d.txt
==591== Parent PID: 590
==591== 
==591== Invalid read of size 1
==591==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==591==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==591==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==591==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==591== 
==591== 
==591== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==591==  Access not within mapped region at address 0x0
==591==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==591==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==591==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==591==  If you believe this happened as a result of a stack
==591==  overflow in your program's main thread (unlikely but
==591==  possible), you can try to increase the size of the
==591==  main thread stack using the --main-stacksize= flag.
==591==  The main thread stack size used in this run was 8388608.
==591== 
==591== HEAP SUMMARY:
==591==     in use at exit: 608 bytes in 3 blocks
==591==   total heap usage: 4 allocs, 1 frees, 1,120 bytes allocated
==591== 
==591== LEAK SUMMARY:
==591==    definitely lost: 0 bytes in 0 blocks
==591==    indirectly lost: 0 bytes in 0 blocks
==591==      possibly lost: 0 bytes in 0 blocks
==591==    still reachable: 608 bytes in 3 blocks
==591==         suppressed: 0 bytes in 0 blocks
==591== Rerun with --leak-check=full to see details of leaked memory
==591== 
==591== For lists of detected and suppressed errors, rerun with: -s
==591== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==597== Memcheck, a memory error detector
==597== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==597== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==597== Command: ./tester i1 i2
==597== Parent PID: 596
==597== 
==597== Invalid read of size 1
==597==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==597==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==597==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==597==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==597== 
==597== 
==597== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==597==  Access not within mapped region at address 0x0
==597==    at 0x1093FD: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==597==    by 0x109494: read_input (in /graderhome/work/c4prj2_input/tester)
==597==    by 0x10A477: main (in /graderhome/work/c4prj2_input/tester)
==597==  If you believe this happened as a result of a stack
==597==  overflow in your program's main thread (unlikely but
==597==  possible), you can try to increase the size of the
==597==  main thread stack using the --main-stacksize= flag.
==597==  The main thread stack size used in this run was 8388608.
==597== 
==597== HEAP SUMMARY:
==597==     in use at exit: 608 bytes in 3 blocks
==597==   total heap usage: 4 allocs, 1 frees, 1,120 bytes allocated
==597== 
==597== LEAK SUMMARY:
==597==    definitely lost: 0 bytes in 0 blocks
==597==    indirectly lost: 0 bytes in 0 blocks
==597==      possibly lost: 0 bytes in 0 blocks
==597==    still reachable: 608 bytes in 3 blocks
==597==         suppressed: 0 bytes in 0 blocks
==597== Rerun with --leak-check=full to see details of leaked memory
==597== 
==597== For lists of detected and suppressed errors, rerun with: -s
==597== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
