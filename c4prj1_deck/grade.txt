Grading at Thu 05 Oct 2023 12:25:27 PM UTC
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
timeout: the monitored command dumped core
Valgrind reported errors:
==714== Memcheck, a memory error detector
==714== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==714== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==714== Command: ./tester act
==714== Parent PID: 713
==714== 
==714== Use of uninitialised value of size 8
==714==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10B0E5: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10BAC7: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==714== 
==714== Invalid write of size 8
==714==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10B0E5: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10BAC7: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==714==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==714== 
==714== 
==714== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==714==  Access not within mapped region at address 0x0
==714==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10B0E5: make_deck_exclude_their_add (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10BAC7: check_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==714==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==714==  If you believe this happened as a result of a stack
==714==  overflow in your program's main thread (unlikely but
==714==  possible), you can try to increase the size of the
==714==  main thread stack using the --main-stacksize= flag.
==714==  The main thread stack size used in this run was 8388608.
==714== 
==714== HEAP SUMMARY:
==714==     in use at exit: 904 bytes in 58 blocks
==714==   total heap usage: 58 allocs, 0 frees, 904 bytes allocated
==714== 
==714== LEAK SUMMARY:
==714==    definitely lost: 0 bytes in 0 blocks
==714==    indirectly lost: 0 bytes in 0 blocks
==714==      possibly lost: 0 bytes in 0 blocks
==714==    still reachable: 904 bytes in 58 blocks
==714==         suppressed: 0 bytes in 0 blocks
==714== Rerun with --leak-check=full to see details of leaked memory
==714== 
==714== Use --track-origins=yes to see where uninitialised values come from
==714== For lists of detected and suppressed errors, rerun with: -s
==714== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing add_empty_card(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==718== Memcheck, a memory error detector
==718== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==718== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==718== Command: ./tester aec
==718== Parent PID: 717
==718== 
==718== Use of uninitialised value of size 8
==718==    at 0x10A864: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10BE62: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==718== 
==718== Invalid write of size 8
==718==    at 0x10A864: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10BE62: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==718==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==718== 
==718== 
==718== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==718==  Access not within mapped region at address 0x0
==718==    at 0x10A864: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10BE62: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==718==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==718==  If you believe this happened as a result of a stack
==718==  overflow in your program's main thread (unlikely but
==718==  possible), you can try to increase the size of the
==718==  main thread stack using the --main-stacksize= flag.
==718==  The main thread stack size used in this run was 8388608.
==718== 
==718== HEAP SUMMARY:
==718==     in use at exit: 6,936 bytes in 447 blocks
==718==   total heap usage: 455 allocs, 8 frees, 7,048 bytes allocated
==718== 
==718== LEAK SUMMARY:
==718==    definitely lost: 0 bytes in 0 blocks
==718==    indirectly lost: 0 bytes in 0 blocks
==718==      possibly lost: 0 bytes in 0 blocks
==718==    still reachable: 6,936 bytes in 447 blocks
==718==         suppressed: 0 bytes in 0 blocks
==718== Rerun with --leak-check=full to see details of leaked memory
==718== 
==718== Use --track-origins=yes to see where uninitialised values come from
==718== For lists of detected and suppressed errors, rerun with: -s
==718== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing make_deck_exclude(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==722== Memcheck, a memory error detector
==722== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==722== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==722== Command: ./tester mde
==722== Parent PID: 721
==722== 
==722== Use of uninitialised value of size 8
==722==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10A8FB: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10C133: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==722== 
==722== Invalid write of size 8
==722==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10A8FB: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10C133: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==722==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==722== 
==722== 
==722== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==722==  Access not within mapped region at address 0x0
==722==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10A8FB: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10C133: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==722==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==722==  If you believe this happened as a result of a stack
==722==  overflow in your program's main thread (unlikely but
==722==  possible), you can try to increase the size of the
==722==  main thread stack using the --main-stacksize= flag.
==722==  The main thread stack size used in this run was 8388608.
==722== 
==722== HEAP SUMMARY:
==722==     in use at exit: 888 bytes in 57 blocks
==722==   total heap usage: 57 allocs, 0 frees, 888 bytes allocated
==722== 
==722== LEAK SUMMARY:
==722==    definitely lost: 0 bytes in 0 blocks
==722==    indirectly lost: 0 bytes in 0 blocks
==722==      possibly lost: 0 bytes in 0 blocks
==722==    still reachable: 888 bytes in 57 blocks
==722==         suppressed: 0 bytes in 0 blocks
==722== Rerun with --leak-check=full to see details of leaked memory
==722== 
==722== Use --track-origins=yes to see where uninitialised values come from
==722== For lists of detected and suppressed errors, rerun with: -s
==722== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing build_remaining_deck(deck_t **, size_t)
Testing with 1 hand
timeout: the monitored command dumped core
Valgrind reported errors:
==726== Memcheck, a memory error detector
==726== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==726== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==726== Command: ./tester brd
==726== Parent PID: 725
==726== 
==726== Use of uninitialised value of size 8
==726==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10A9BC: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10C3E0: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==726== 
==726== Invalid write of size 8
==726==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10A9BC: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10C3E0: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==726==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==726== 
==726== 
==726== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==726==  Access not within mapped region at address 0x0
==726==    at 0x10A7EA: add_card_to (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10A9BC: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10C3E0: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==726==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==726==  If you believe this happened as a result of a stack
==726==  overflow in your program's main thread (unlikely but
==726==  possible), you can try to increase the size of the
==726==  main thread stack using the --main-stacksize= flag.
==726==  The main thread stack size used in this run was 8388608.
==726== 
==726== HEAP SUMMARY:
==726==     in use at exit: 104 bytes in 10 blocks
==726==   total heap usage: 11 allocs, 1 frees, 8,296 bytes allocated
==726== 
==726== LEAK SUMMARY:
==726==    definitely lost: 0 bytes in 0 blocks
==726==    indirectly lost: 0 bytes in 0 blocks
==726==      possibly lost: 0 bytes in 0 blocks
==726==    still reachable: 104 bytes in 10 blocks
==726==         suppressed: 0 bytes in 0 blocks
==726== Rerun with --leak-check=full to see details of leaked memory
==726== 
==726== Use --track-origins=yes to see where uninitialised values come from
==726== For lists of detected and suppressed errors, rerun with: -s
==726== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing get_match_count(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==730== Memcheck, a memory error detector
==730== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==730== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==730== Command: ./tester gmc
==730== Parent PID: 729
==730== 
==730== Invalid read of size 8
==730==    at 0x109BA4: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10C816: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==730==  Address 0x4a450e8 is 0 bytes after a block of size 8 alloc'd
==730==    at 0x483B723: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==730==    by 0x483E017: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==730==    by 0x10B28D: my_add_card_to (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10C764: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==730== 
==730== Invalid read of size 4
==730==    at 0x109BA7: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10C816: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==730==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==730== 
==730== 
==730== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==730==  Access not within mapped region at address 0x0
==730==    at 0x109BA7: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10C816: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==730==    by 0x10CB19: main (in /graderhome/work/c4prj1_deck/tester)
==730==  If you believe this happened as a result of a stack
==730==  overflow in your program's main thread (unlikely but
==730==  possible), you can try to increase the size of the
==730==  main thread stack using the --main-stacksize= flag.
==730==  The main thread stack size used in this run was 8388608.
==730== 
==730== HEAP SUMMARY:
==730==     in use at exit: 72 bytes in 8 blocks
==730==   total heap usage: 8 allocs, 0 frees, 72 bytes allocated
==730== 
==730== LEAK SUMMARY:
==730==    definitely lost: 0 bytes in 0 blocks
==730==    indirectly lost: 0 bytes in 0 blocks
==730==      possibly lost: 0 bytes in 0 blocks
==730==    still reachable: 72 bytes in 8 blocks
==730==         suppressed: 0 bytes in 0 blocks
==730== Rerun with --leak-check=full to see details of leaked memory
==730== 
==730== For lists of detected and suppressed errors, rerun with: -s
==730== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
